- const getInputName = (formElement, property) => `${formElement.name}[${property}]`

mixin formFor(formElement, options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
  form(action= url method= isStandart ? method : 'post')
    if !isStandart
      input(name='_method' type='hidden' value= method)
    block

mixin input(formElement, property, label, message = '', options = { as: 'text' })
  - const value = formElement.object[property] === undefined ? '' : formElement.object[property]
  - const inputId = `input${property}_${value}`;
  //- - const lowTextId = `text${property}_${value}`;
  .form-group
    label(for= inputId) #{label}
    input(name=getInputName(formElement, property) id= inputId placeholder= label class='form-control' type=options['as'] value= value)
    //- small(id=`${lowTextId}` class="text-muted") #{message}
    if formElement.errors[property]
      .form-control-feedback= formElement.errors[property].map(({ message }) => message).join('. ')

mixin button(color, message, type = 'submit')
  .form-group
    button(class=`btn btn-${color} btn-block` type= type value='Save') #{message}

//- mixin input-btn(type = 'submit', value = 'Save')
//-   .form-group
//-     input(class='btn' type=`${type}` value=`${value}`)

//- ???
//- class=(formElement.errors[property] && 'has-danger')
